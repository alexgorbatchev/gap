// Generated by CoffeeScript 1.6.2
(function() {
  var Gap, GapReadTracker, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (root._gap == null) {
    root._gap = [];
  }

  Gap = (function() {
    Gap.prototype.subscribers = [];

    function Gap(previous, subscribers) {
      var subscriber, _i, _len;

      if (this.isArray(subscribers)) {
        for (_i = 0, _len = subscribers.length; _i < _len; _i++) {
          subscriber = subscribers[_i];
          this.subscribe(subscriber);
        }
      }
      if (this.isArray(previous)) {
        this.push(previous);
      }
    }

    Gap.prototype.isArray = function(args) {
      return (args != null) && {}.toString.call(args) === "[object Array]" && args.length > 0;
    };

    Gap.prototype.publish = function(commandArray) {
      var subscriber, _i, _len, _ref, _results;

      _ref = this.subscribers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subscriber = _ref[_i];
        _results.push(subscriber.listen(commandArray));
      }
      return _results;
    };

    Gap.prototype.push = function(args) {
      var i, _i, _len, _results;

      if (this.isArray(args)) {
        if (this.isArray(args[0])) {
          _results = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            i = args[_i];
            _results.push(this.push(i));
          }
          return _results;
        } else {
          if (args[0].indexOf("_gap") === 0) {
            return this.publish(args);
          } else {
            root._gaq.push(args);
            return root.console && console.log("Pushed: " + args.toString());
          }
        }
      }
    };

    Gap.prototype.subscribe = function(subscriber) {
      return this.subscribers.push(subscriber);
    };

    return Gap;

  })();

  GapReadTracker = (function() {
    function GapReadTracker() {}

    GapReadTracker.prototype.listen = function(commandArray) {
      var duration, fn;

      if (commandArray[0] === "_gapTrackRead" && commandArray.length === 2) {
        if (root._gapReadTrackerInterval != null) {
          root.clearInterval(root._gapReadTrackerInterval);
        }
        duration = parseInt(commandArray[1], 10);
        root._seconds = 0;
        return root._gapReadTrackerInterval = root.setInterval(fn = function() {
          root._gap.push(["_trackEvent", "read", (root._seconds += duration).toString()]);
          return fn;
        }, duration * 1000);
      }
    };

    return GapReadTracker;

  })();

  (function() {
    var ga, s;

    ga = document.createElement("script");
    ga.async = true;
    ga.type = "text/javascript";
    ga.src = root.location.protocol === "https:" ? "https://ssl" : "http://www" + ".google-analytics.com/ga.js";
    ga.onload = ga.onreadystatechange = function() {
      root._gapReadTracker = new GapReadTracker();
      return root._gap = new Gap(root._gap, [root._gapReadTracker]);
    };
    s = document.getElementsByTagName("script")[0];
    return s.parentNode.insertBefore(ga, s);
  })();

}).call(this);
